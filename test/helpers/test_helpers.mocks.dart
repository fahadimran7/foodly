// Mocks generated by Mockito 5.3.0 from annotations
// in stacked_architecture/test/helpers/test_helpers.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:flutter/material.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:places_service/src/models/application_models.dart' as _i3;
import 'package:places_service/src/places_service.dart' as _i8;
import 'package:stacked_architecture/models/application_models.dart' as _i2;
import 'package:stacked_architecture/services/user_service.dart' as _i4;
import 'package:stacked_services/stacked_services.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUser_0 extends _i1.SmartFake implements _i2.User {
  _FakeUser_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakePlacesLocation_1 extends _i1.SmartFake
    implements _i3.PlacesLocation {
  _FakePlacesLocation_1(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakePlacesDetails_2 extends _i1.SmartFake implements _i3.PlacesDetails {
  _FakePlacesDetails_2(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [UserService].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserService extends _i1.Mock implements _i4.UserService {
  @override
  _i2.User get currentUser =>
      (super.noSuchMethod(Invocation.getter(#currentUser),
              returnValue: _FakeUser_0(this, Invocation.getter(#currentUser)))
          as _i2.User);
  @override
  _i5.Future<void> syncUserAccount() => (super.noSuchMethod(
      Invocation.method(#syncUserAccount, []),
      returnValue: _i5.Future<void>.value(),
      returnValueForMissingStub: _i5.Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> syncOrCreateUserAccount({_i2.User? user}) => (super
          .noSuchMethod(
              Invocation.method(#syncOrCreateUserAccount, [], {#user: user}),
              returnValue: _i5.Future<void>.value(),
              returnValueForMissingStub: _i5.Future<void>.value())
      as _i5.Future<void>);
  @override
  _i5.Future<_i2.User?> getUserAccountDetails() =>
      (super.noSuchMethod(Invocation.method(#getUserAccountDetails, []),
          returnValue: _i5.Future<_i2.User?>.value()) as _i5.Future<_i2.User?>);
  @override
  _i5.Future<dynamic> updateUserAccountDetails(
          {String? fullName, String? email}) =>
      (super.noSuchMethod(
          Invocation.method(#updateUserAccountDetails, [],
              {#fullName: fullName, #email: email}),
          returnValue: _i5.Future<dynamic>.value()) as _i5.Future<dynamic>);
  @override
  void deleteUserSessionOnLogOut() =>
      super.noSuchMethod(Invocation.method(#deleteUserSessionOnLogOut, []),
          returnValueForMissingStub: null);
}

/// A class which mocks [NavigationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigationService extends _i1.Mock implements _i6.NavigationService {
  @override
  String get previousRoute =>
      (super.noSuchMethod(Invocation.getter(#previousRoute), returnValue: '')
          as String);
  @override
  String get currentRoute =>
      (super.noSuchMethod(Invocation.getter(#currentRoute), returnValue: '')
          as String);
  @override
  _i7.GlobalKey<_i7.NavigatorState>? nestedNavigationKey(int? index) =>
      (super.noSuchMethod(Invocation.method(#nestedNavigationKey, [index]))
          as _i7.GlobalKey<_i7.NavigatorState>?);
  @override
  void config(
          {bool? enableLog,
          bool? defaultPopGesture,
          bool? defaultOpaqueRoute,
          Duration? defaultDurationTransition,
          bool? defaultGlobalState,
          _i6.Transition? defaultTransitionStyle,
          String? defaultTransition}) =>
      super.noSuchMethod(
          Invocation.method(#config, [], {
            #enableLog: enableLog,
            #defaultPopGesture: defaultPopGesture,
            #defaultOpaqueRoute: defaultOpaqueRoute,
            #defaultDurationTransition: defaultDurationTransition,
            #defaultGlobalState: defaultGlobalState,
            #defaultTransitionStyle: defaultTransitionStyle,
            #defaultTransition: defaultTransition
          }),
          returnValueForMissingStub: null);
  @override
  _i5.Future<T?>? navigateWithTransition<T>(_i7.Widget? page,
          {bool? opaque,
          String? transition = r'',
          Duration? duration,
          bool? popGesture,
          int? id,
          _i7.Curve? curve,
          bool? fullscreenDialog = false,
          bool? preventDuplicates = true,
          _i6.Transition? transitionClass,
          _i6.Transition? transitionStyle,
          String? routeName}) =>
      (super.noSuchMethod(Invocation.method(#navigateWithTransition, [
        page
      ], {
        #opaque: opaque,
        #transition: transition,
        #duration: duration,
        #popGesture: popGesture,
        #id: id,
        #curve: curve,
        #fullscreenDialog: fullscreenDialog,
        #preventDuplicates: preventDuplicates,
        #transitionClass: transitionClass,
        #transitionStyle: transitionStyle,
        #routeName: routeName
      })) as _i5.Future<T?>?);
  @override
  _i5.Future<T?>? replaceWithTransition<T>(_i7.Widget? page,
          {bool? opaque,
          String? transition = r'',
          Duration? duration,
          bool? popGesture,
          int? id,
          _i7.Curve? curve,
          bool? fullscreenDialog = false,
          bool? preventDuplicates = true,
          _i6.Transition? transitionClass,
          _i6.Transition? transitionStyle,
          String? routeName}) =>
      (super.noSuchMethod(Invocation.method(#replaceWithTransition, [
        page
      ], {
        #opaque: opaque,
        #transition: transition,
        #duration: duration,
        #popGesture: popGesture,
        #id: id,
        #curve: curve,
        #fullscreenDialog: fullscreenDialog,
        #preventDuplicates: preventDuplicates,
        #transitionClass: transitionClass,
        #transitionStyle: transitionStyle,
        #routeName: routeName
      })) as _i5.Future<T?>?);
  @override
  bool back<T>({dynamic result, int? id}) => (super.noSuchMethod(
      Invocation.method(#back, [], {#result: result, #id: id}),
      returnValue: false) as bool);
  @override
  void popUntil(_i7.RoutePredicate? predicate, {int? id}) =>
      super.noSuchMethod(Invocation.method(#popUntil, [predicate], {#id: id}),
          returnValueForMissingStub: null);
  @override
  void popRepeated(int? popTimes) =>
      super.noSuchMethod(Invocation.method(#popRepeated, [popTimes]),
          returnValueForMissingStub: null);
  @override
  _i5.Future<T?>? navigateTo<T>(String? routeName,
          {dynamic arguments,
          int? id,
          bool? preventDuplicates = true,
          Map<String, String>? parameters,
          _i7.RouteTransitionsBuilder? transition}) =>
      (super.noSuchMethod(Invocation.method(#navigateTo, [
        routeName
      ], {
        #arguments: arguments,
        #id: id,
        #preventDuplicates: preventDuplicates,
        #parameters: parameters,
        #transition: transition
      })) as _i5.Future<T?>?);
  @override
  _i5.Future<T?>? navigateToView<T>(_i7.Widget? view,
          {dynamic arguments,
          int? id,
          bool? opaque,
          _i7.Curve? curve,
          Duration? duration,
          bool? fullscreenDialog = false,
          bool? popGesture,
          bool? preventDuplicates = true,
          _i6.Transition? transition,
          _i6.Transition? transitionStyle}) =>
      (super.noSuchMethod(Invocation.method(#navigateToView, [
        view
      ], {
        #arguments: arguments,
        #id: id,
        #opaque: opaque,
        #curve: curve,
        #duration: duration,
        #fullscreenDialog: fullscreenDialog,
        #popGesture: popGesture,
        #preventDuplicates: preventDuplicates,
        #transition: transition,
        #transitionStyle: transitionStyle
      })) as _i5.Future<T?>?);
  @override
  _i5.Future<T?>? replaceWith<T>(String? routeName,
          {dynamic arguments,
          int? id,
          bool? preventDuplicates = true,
          Map<String, String>? parameters,
          _i7.RouteTransitionsBuilder? transition}) =>
      (super.noSuchMethod(Invocation.method(#replaceWith, [
        routeName
      ], {
        #arguments: arguments,
        #id: id,
        #preventDuplicates: preventDuplicates,
        #parameters: parameters,
        #transition: transition
      })) as _i5.Future<T?>?);
  @override
  _i5.Future<T?>? clearStackAndShow<T>(String? routeName,
          {dynamic arguments, int? id, Map<String, String>? parameters}) =>
      (super.noSuchMethod(Invocation.method(#clearStackAndShow, [
        routeName
      ], {
        #arguments: arguments,
        #id: id,
        #parameters: parameters
      })) as _i5.Future<T?>?);
  @override
  _i5.Future<T?>? clearStackAndShowView<T>(_i7.Widget? view,
          {dynamic arguments, int? id}) =>
      (super.noSuchMethod(Invocation.method(
              #clearStackAndShowView, [view], {#arguments: arguments, #id: id}))
          as _i5.Future<T?>?);
  @override
  _i5.Future<T?>? clearTillFirstAndShow<T>(String? routeName,
          {dynamic arguments,
          int? id,
          bool? preventDuplicates = true,
          Map<String, String>? parameters}) =>
      (super.noSuchMethod(Invocation.method(#clearTillFirstAndShow, [
        routeName
      ], {
        #arguments: arguments,
        #id: id,
        #preventDuplicates: preventDuplicates,
        #parameters: parameters
      })) as _i5.Future<T?>?);
  @override
  _i5.Future<T?>? clearTillFirstAndShowView<T>(_i7.Widget? view,
          {dynamic arguments, int? id}) =>
      (super.noSuchMethod(Invocation.method(#clearTillFirstAndShowView, [view],
          {#arguments: arguments, #id: id})) as _i5.Future<T?>?);
  @override
  _i5.Future<T?>? pushNamedAndRemoveUntil<T>(String? routeName,
          {_i7.RoutePredicate? predicate, dynamic arguments, int? id}) =>
      (super.noSuchMethod(Invocation.method(#pushNamedAndRemoveUntil, [
        routeName
      ], {
        #predicate: predicate,
        #arguments: arguments,
        #id: id
      })) as _i5.Future<T?>?);
}

/// A class which mocks [PlacesService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPlacesService extends _i1.Mock implements _i8.PlacesService {
  @override
  _i3.PlacesLocation get currentPosition => (super.noSuchMethod(
          Invocation.getter(#currentPosition),
          returnValue:
              _FakePlacesLocation_1(this, Invocation.getter(#currentPosition)))
      as _i3.PlacesLocation);
  @override
  void initialize({String? apiKey}) =>
      super.noSuchMethod(Invocation.method(#initialize, [], {#apiKey: apiKey}),
          returnValueForMissingStub: null);
  @override
  _i5.Future<List<_i3.PlacesAutoCompleteResult>> getAutoComplete(
          String? input) =>
      (super.noSuchMethod(Invocation.method(#getAutoComplete, [input]),
              returnValue: _i5.Future<List<_i3.PlacesAutoCompleteResult>>.value(
                  <_i3.PlacesAutoCompleteResult>[]))
          as _i5.Future<List<_i3.PlacesAutoCompleteResult>>);
  @override
  _i5.Future<_i3.PlacesDetails> getPlaceDetails(String? placeId) =>
      (super.noSuchMethod(Invocation.method(#getPlaceDetails, [placeId]),
          returnValue: _i5.Future<_i3.PlacesDetails>.value(_FakePlacesDetails_2(
              this, Invocation.method(#getPlaceDetails, [placeId])))) as _i5
          .Future<_i3.PlacesDetails>);
  @override
  _i5.Future<dynamic> getPlacesAtCurrentLocation() =>
      (super.noSuchMethod(Invocation.method(#getPlacesAtCurrentLocation, []),
          returnValue: _i5.Future<dynamic>.value()) as _i5.Future<dynamic>);
}
